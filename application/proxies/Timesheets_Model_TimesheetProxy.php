<?php

namespace DoctrineProxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Timesheets_Model_TimesheetProxy extends \Timesheets_Model_Timesheet implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function generateId()
    {
        $this->__load();
        return parent::generateId();
    }

    public function get_id()
    {
        $this->__load();
        return parent::get_id();
    }

    public function get_employee()
    {
        $this->__load();
        return parent::get_employee();
    }

    public function set_employee($_employee)
    {
        $this->__load();
        return parent::set_employee($_employee);
    }

    public function get_project()
    {
        $this->__load();
        return parent::get_project();
    }

    public function set_project($_project)
    {
        $this->__load();
        return parent::set_project($_project);
    }

    public function get_month()
    {
        $this->__load();
        return parent::get_month();
    }

    public function set_month($_month)
    {
        $this->__load();
        return parent::set_month($_month);
    }

    public function get_monthAsDate()
    {
        $this->__load();
        return parent::get_monthAsDate();
    }

    public function get_year()
    {
        $this->__load();
        return parent::get_year();
    }

    public function set_year($_year)
    {
        $this->__load();
        return parent::set_year($_year);
    }

    public function get_activities()
    {
        $this->__load();
        return parent::get_activities();
    }

    public function set_activities($_activities)
    {
        $this->__load();
        return parent::set_activities($_activities);
    }

    public function get_activitiesForDeliverable(\Erga_Model_SubItems_Deliverable $deliverable)
    {
        $this->__load();
        return parent::get_activitiesForDeliverable($deliverable);
    }

    public function get_activitiesForDay($day)
    {
        $this->__load();
        return parent::get_activitiesForDay($day);
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function get__classname()
    {
        $this->__load();
        return parent::get__classname();
    }

    public function set__classname($__classname)
    {
        $this->__load();
        return parent::set__classname($__classname);
    }

    public function setOptions(array $options, $ignoreisvisible = false)
    {
        $this->__load();
        return parent::setOptions($options, $ignoreisvisible);
    }

    public function getOptions($onlyDbFields = true, $poptions = array (
))
    {
        $this->__load();
        return parent::getOptions($onlyDbFields, $poptions);
    }

    public function toArray($onlyDbFields = true, $recursive = false, $options = array (
))
    {
        $this->__load();
        return parent::toArray($onlyDbFields, $recursive, $options);
    }

    public function save()
    {
        $this->__load();
        return parent::save();
    }

    public function remove()
    {
        $this->__load();
        return parent::remove();
    }

    public function getMetaOptions()
    {
        $this->__load();
        return parent::getMetaOptions();
    }

    public function getOptionsAsStrings($where = 'object', $dbfieldsonly = false, $curObject = NULL, &$variables = array (
), $visited = array (
))
    {
        $this->__load();
        return parent::getOptionsAsStrings($where, $dbfieldsonly, $curObject, $variables, $visited);
    }

    public function modifySubCollection($newcollection, &$oldcollection)
    {
        $this->__load();
        return parent::modifySubCollection($newcollection, $oldcollection);
    }


    public function __sleep()
    {
        return array('__isInitialized__', '_id', '_employee', '_project', '_month', '_year', '_activities');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}